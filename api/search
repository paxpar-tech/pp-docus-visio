[{"id":"content:0.index.md","path":"/","dir":"","title":"Home","description":"","keywords":[],"body":"     Our vision of Docus present and future.   Our experiments with   Docus  to fit our needs\nin a very opiniated way.  Write pages in   Markdown , use   Vue  components and enjoy the power of   Nuxt .      S3 content backend   JSON-schema support  PDF file support  Exotic file type support  Custom nuxt layer   Nuxt Studio feedback  "},{"id":"content:1.introduction:1.getting-started.md","path":"/introduction/getting-started","dir":"introduction","title":"Getting Started","description":"","keywords":["TODO"],"body":"  Getting Started  TODO   exotic format : PDF  exotic format : FEC, ifc, XML, ...  k8s deployment  vue/nuxt/content/docus/studio  painfull JS/TS stack (yarn/pnpm/bun)  static/SSR/hybrid/SPA/... mess, hard to understand"},{"id":"content:10.scenario:index.md","path":"/scenario","dir":"","title":"Scenario","description":"TODO: describe here a scenario\nwhere most of the dreamed future will be used","keywords":[],"body":"  Scenario  TODO: describe here a scenario\nwhere most of the dreamed future will be used  steps :   go to the github repo xxx  fork it  wait for the initial deployment  go to the site  click on the nuxt studio link on the github README  edit basic content  create a new doc schema  create document from the previous doc type with the text editor  create document from the previous doc type with the visual editor"},{"id":"content:20.docus:bun.md","path":"/docus/bun","dir":"docus","title":"bun","description":"Describe here the workflow with bun packet manager.","keywords":[],"body":"  bun  Describe here the workflow with bun packet manager.  TODO: describe how to dev locally with the layer"},{"id":"content:20.docus:filter_ignore.md","path":"/docus/filter_ignore","dir":"docus","title":"Filter / Ignore","description":"YAML and JSON files are first class content payloads.","keywords":[],"body":"  Filter / Ignore  YAML and JSON files are first class content payloads.  But YAML and JSON files can also be   opaque  assets not related to content.\nWe may think this is not a trouble to let those files be consumed as content payloads.\nBut in some cases they may be big and will probably clutter the content engine.  We would like to define which YAML/JSON should be ignored by the content engine.  We would also like to define a filter for intermediate cases where we want to keep a small part of the JSON/YAML payload as content."},{"id":"content:20.docus:json_schema.md","path":"/docus/json_schema","dir":"docus","title":"JSON schema","description":"See also JSON-schema (related to Nuxt studio):","keywords":["$schema transform"],"body":"  JSON schema  See also JSON-schema (  related to Nuxt studio ):  $schema transform  When defining a   new content transformer \nwe tell which extensions are involved.  It's fine to target single purpose file formats like '.xlsx' or '.csv'.\nBut it's not enough to set up a transformer for a special YAML or JSON based dialect.  We can use custom extension like   .checklist.yaml  but it would be better to detect the thoses files without modifiyng them.  For JSON/YAML special dialects it is very common to use the   $schema property .   $schema  filter  Expected new YAML/JSON schema transformer :     export   default   defineJSONSchemaTransformer  ({\n     name:   'my-dummy-transformer'  ,\n     schema:   '$schema: https://paxpar.tech/schema/mycheck/default/0'  ,\n     extensions: [\n       '.yaml'  ,\n       '.yml'  ,\n       '.json'  ,\n     ],\n     // ...\n   })\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:20.docus:layer.md","path":"/docus/layer","dir":"docus","title":"custom layer","description":"TODO:","keywords":[],"body":"  custom layer  TODO:   add pp-widgets as a private layer  describe the pitfalls  add a public layer with working code"},{"id":"content:20.docus:s3.md","path":"/docus/s3","dir":"docus","title":"S3 bucket","description":"See also S3 bucket for nuxt studio.","keywords":[],"body":"  S3 bucket  See also   S3 bucket for nuxt studio .  TODO:   Use a S3 bucket as a nuxt content storage  Merge/mix nuxt content storage from filesystem and S3 bucket  Fetch nuxt content data from S3 bucket at runtime"},{"id":"content:20.docus:single_tree.md","path":"/docus/single_tree","dir":"docus","title":"Single Tree","description":"Let's have a single tree to organize all files related to content.","keywords":[],"body":"  Single Tree  Let's have a single tree to organize all files related to content.  Today we need to   separate  files in many folders:    /content  for files supported by nuxt content (md, json, yaml)   /public  for files not content aware (jpeg, wbep, svg, ...)  some other folders of many file types related to other part of the platform (API, business logic design docs, file samples, ...)  Example of multiple trees:   /\n├── content/\n│   ├── case1.md\n│   └── case2.md\n├── public/\n│   ├── case1/\n│   │   ├── check_step1.webp\n│   │   ├── check_step2.webp\n│   │   └── photo.webp\n│   └── case2/\n│       ├── check_step1.webp\n│       ├── check_step2.webp\n│       └── photo.webp\n└── pp-ref-common/\n    ├── customer1/\n    │   ├── case1.md\n    │   └── case2.md\n    └── customer2/\n        ├── case1.md\n        └── case2.md\n\n"},{"id":"content:30.nuxt_studio:escape.md","path":"/nuxt_studio/escape","dir":"nuxt_studio","title":"escape key","description":"While editing a file, pressing the escape key move up one level on editor/browser hierarchy.","keywords":[],"body":"  escape key  While editing a file, pressing the escape key move up one level on editor/browser hierarchy.  In the editor this beheviour is misleading if you use mutiple cursors.\nThe common way to exit multiple cursors is also pressing the escape key.  To be sure to exit the multiple cursors, I tend to press the escape key even if I'm not in multiple cursor, resulting in exiting the editor."},{"id":"content:30.nuxt_studio:fork_easy.md","path":"/nuxt_studio/fork_easy","dir":"nuxt_studio","title":"Easy fork","description":"On a single click, fork an existing github project and get :","keywords":[],"body":"  Easy fork  On a single click, fork an existing github project and get :   a direct link from the README to nuxt studio  a running app via github pages  a new unique set of ID/API_KEY (generated on fork)  a new nuxt studio team  an auto-generated link to join the new nuxt studio team"},{"id":"content:30.nuxt_studio:git.md","path":"/nuxt_studio/git","dir":"nuxt_studio","title":"git","description":"We may use a simple git repo as Nuxt Studio source backend.","keywords":[],"body":"  git  We may use a simple git repo as Nuxt Studio source backend.  Currently Nuxt Studio uses github as its source backend.  We will lose a lot of feature specific to github.  This will open a lot of new usecases where github is not an option :   full open source git forge (gitlab, ...)  lightweight self hosted option (gitea, ...)  sovereign hosting  GAFAM/BATIX free hosting  private hosting for security  edge hosting for speed (huge git repo)  lower price  special free tier feature (gitlab private repo with public pages, ...)"},{"id":"content:30.nuxt_studio:json_schema.md","path":"/nuxt_studio/json_schema","dir":"nuxt_studio","title":"JSON-schema","description":"Many features related to JSON-schema (some related to docus):","keywords":["YAML file linter","front-matter schema","front-matter linter","YAML file visual editing","front matter visual editing","YAML file custom visual editing","front-matter custom visual editing"],"body":"  JSON-schema  Many features related to JSON-schema (  some related to docus ):  YAML file linter  Use the   redhat YAML vscode extension  while editing YAML file content.\nIt lets you validate your JSON or YAML content against a predefined   schema .  It's a life saver when you deal with strongly typed JSON/YAML content.  With a single first comment pointing to your schema, the editor will check if your content is valid :     # yaml-language-server: $schema=https://paxpar.gitlab.io/schemas/checklist-2.0.schema.json\n   $schema  :   https://paxpar.gitlab.io/schemas/checklist-2.0.schema.json\n   name  :   Ordre d'intervention EDF\n   desc  :   Liste de vérification appliquée lors de la saisie d'un ordre d'intervention\n   tags  :\n     -   atelier\n   owner  :\n     signature_pubkey  :   default\n  The schema URL could also be relative to the current project\nwhere schemas would be stored in   /public/schemas  :     # yaml-language-server: $schema=/schemas/checklist-2.0.schema.json\n   $schema  :   https://paxpar.gitlab.io/schemas/checklist-2.0.schema.json\n   name  :   Ordre d'intervention EDF\n   desc  :   Liste de vérification appliquée lors de la saisie d'un ordre d'intervention\n   tags  :\n     -   atelier\n   owner  :\n     signature_pubkey  :   default\n  front-matter schema  Supporting a   $schema  native property\nin the   front matter \nwill provide a kind of strong typing of document metadata.     ---\n   $schema  :   https://paxpar.tech/schema/mycheck/default/0\n   name  :   Ordre d'intervention EDF\n   desc  :   Liste de vérification appliquée lors de la saisie d'un ordre d'intervention\n   tags  :\n     -   atelier\n   owner  :\n     signature_pubkey  :   default\n   ---\n   \n   # My document\n   \n   Lorem ipsum ...\n  front-matter linter  Replicate the behaviour of the   redhat YAML vscode extension .\nIt lets you validate your JSON or YAML content against a predefined   schema .  Same feature as YAML file linter but restricted to the front-matter.  YAML file visual editing  TODO: describe/show our use of   JSON-editor  front matter visual editing  TODO: describe/show our use of   JSON-editor  YAML file custom visual editing  We may define visual component to edit typed YAML file.\nThe component will be registered to handle a given schema\nand will produce the JSON/YAML payload.  TODO: put an example here from pp  front-matter custom visual editing  We may define visual component to edit typed front matter.\nThe component will be registered to handle a given schema\nand will produce the JSON/YAML payload.  TODO: put an example here from pp  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:30.nuxt_studio:runtime_use.md","path":"/nuxt_studio/runtime_use","dir":"nuxt_studio","title":"runtime use","description":"Use Nuxt Studio to edit live-content.","keywords":[],"body":"  runtime use  Use Nuxt Studio to edit live-content.  Think of a webapp where some pages fetch data from live sources (mostly YAML/JSON§/MD file in a S3 bucket).  Being able to edit those sources with Nuxt Studio without a full or partial site generation (when   hybrid rendering  is not an option)."},{"id":"content:30.nuxt_studio:s3.md","path":"/nuxt_studio/s3","dir":"nuxt_studio","title":"S3 bucket","description":"See also S3 bucket for docus.","keywords":[],"body":"  S3 bucket  See also   S3 bucket for docus .  We may use a S3 bucket as Nuxt Studio source backend.  Currently Nuxt Studio uses github as its source backend.  Editing files in Nuxt Studio will result in direct S3 file operations.  s3 is better than git for   live   updates.  git is better than s3 for   traced   updates.  TODO: Explore\nthe   nuxt sources configuration \nwhich is based on   unjs/unstorage \nwhich support S3 backend."}]